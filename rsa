#!/usr/bin/python3

import sys
import math

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def pollards_rho(n):
    x = 2
    y = 2
    d = 1
    f = lambda x: (x**2 + 1) % n

    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)
    
    if d == n:
        return None # Factorization failed
    return d

def factorize_rsa(n):
    factors = []
    while n > 1:
        factor = pollards_rho(n)
        if factor:
            factors.append(factor)
            n //= factor
        else:
            factors.append(n) # If Pollard's rho fails, n must be a prime
            break
    return factors

def main(file_path):
    with open(file_path, 'r') as file:
        for line in file:
            n = int(line.strip())
            factors = factorize_rsa(n)
            if len(factors) == 2:
                print(f"{n}={factors[0]}*{factors[1]}")
            else:
                print(f"Unable to factorize {n} into two prime factors")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python rsa.py <file>")
        sys.exit(1)
    main(sys.argv[1])
